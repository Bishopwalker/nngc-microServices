# GitLab CI/CD Pipeline for NNGC Microservices
# This pipeline builds, tests, and deploys multiple Spring Boot microservices

# Define stages that will run in sequence
stages:
  - validate
  - test
  - build
  - package
  - deploy-staging
  - deploy-production

# Global variables used across all jobs
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_REGISTRY: "$CI_REGISTRY"
  DOCKER_IMAGE_TAG: "$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"

# Cache Maven dependencies to speed up builds
cache:
  paths:
    - .m2/repository/
    - target/

# Docker-in-Docker service for building Docker images
services:
  - docker:20.10.16-dind

# Job template for common Maven setup
.maven_template: &maven_template
  image: maven:3.9.0-openjdk-21
  before_script:
    - echo "Setting up Maven environment..."
    - mvn --version

# Job template for Docker builds
.docker_template: &docker_template
  image: docker:20.10.16
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

###########################################
# VALIDATE STAGE
###########################################

validate_project:
  <<: *maven_template
  stage: validate
  script:
    - echo "🔍 Validating project structure and dependencies..."
    - mvn validate $MAVEN_CLI_OPTS
    - mvn dependency:analyze-report $MAVEN_CLI_OPTS
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
    paths:
      - "**/target/site/"
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

###########################################
# TEST STAGE
###########################################

unit_tests:
  <<: *maven_template
  stage: test
  script:
    - echo "🧪 Running unit tests for all services..."
    - mvn test $MAVEN_CLI_OPTS
    - echo "📊 Generating test coverage reports..."
    - mvn jacoco:report $MAVEN_CLI_OPTS
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'

integration_tests:
  <<: *maven_template
  stage: test
  services:
    - postgres:13
    - redis:6.2
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    SPRING_PROFILES_ACTIVE: test
  script:
    - echo "🔧 Running integration tests..."
    - mvn verify -Dspring.profiles.active=test $MAVEN_CLI_OPTS
  artifacts:
    reports:
      junit: "**/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  allow_failure: false

###########################################
# BUILD STAGE
###########################################

.build_service_template: &build_service
  <<: *maven_template
  stage: build
  script:
    - echo "🏗️ Building $SERVICE_NAME..."
    - cd $SERVICE_NAME
    - mvn clean package -DskipTests $MAVEN_CLI_OPTS
  artifacts:
    paths:
      - "$SERVICE_NAME/target/*.jar"
    expire_in: 1 hour

build_service_registry:
  <<: *build_service
  variables:
    SERVICE_NAME: "service-registry"

build_api_gateway:
  <<: *build_service
  variables:
    SERVICE_NAME: "api-gateway"

build_customer_service:
  <<: *build_service
  variables:
    SERVICE_NAME: "customer-service"

build_token_service:
  <<: *build_service
  variables:
    SERVICE_NAME: "token-service"

build_stripe_service:
  <<: *build_service
  variables:
    SERVICE_NAME: "stripe-service"

build_email_service:
  <<: *build_service
  variables:
    SERVICE_NAME: "email-service"

build_google_service:
  <<: *build_service
  variables:
    SERVICE_NAME: "google"

###########################################
# PACKAGE STAGE (Docker Images)
###########################################

.package_service_template: &package_service
  <<: *docker_template
  stage: package
  script:
    - echo "📦 Building Docker image for $SERVICE_NAME..."
    - cd $SERVICE_NAME
    - docker build -t $DOCKER_REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$DOCKER_IMAGE_TAG .
    - docker build -t $DOCKER_REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest .
    - echo "🚀 Pushing Docker image to registry..."
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest

package_service_registry:
  <<: *package_service
  variables:
    SERVICE_NAME: "service-registry"
  dependencies:
    - build_service_registry

package_api_gateway:
  <<: *package_service
  variables:
    SERVICE_NAME: "api-gateway"
  dependencies:
    - build_api_gateway

package_customer_service:
  <<: *package_service
  variables:
    SERVICE_NAME: "customer-service"
  dependencies:
    - build_customer_service

package_token_service:
  <<: *package_service
  variables:
    SERVICE_NAME: "token-service"
  dependencies:
    - build_token_service

package_stripe_service:
  <<: *package_service
  variables:
    SERVICE_NAME: "stripe-service"
  dependencies:
    - build_stripe_service

package_email_service:
  <<: *package_service
  variables:
    SERVICE_NAME: "email-service"
  dependencies:
    - build_email_service

package_google_service:
  <<: *package_service
  variables:
    SERVICE_NAME: "google"
  dependencies:
    - build_google_service

###########################################
# DEPLOY STAGING
###########################################

deploy_staging:
  image: alpine:latest
  stage: deploy-staging
  before_script:
    - apk add --no-cache docker-compose curl
  script:
    - echo "🚀 Deploying to staging environment..."
    - echo "Updating docker-compose with new image tags..."
    - sed -i "s/:latest/:$DOCKER_IMAGE_TAG/g" docker-compose.staging.yml
    - docker-compose -f docker-compose.staging.yml up -d
    - echo "⏳ Waiting for services to be healthy..."
    - sleep 30
    - echo "🔍 Health checking services..."
    - curl -f http://staging-gateway:8080/actuator/health || exit 1
  environment:
    name: staging
    url: http://staging.nngc.example.com
  only:
    - develop
  dependencies:
    - package_service_registry
    - package_api_gateway
    - package_customer_service
    - package_token_service
    - package_stripe_service
    - package_email_service
    - package_google_service

###########################################
# DEPLOY PRODUCTION
###########################################

deploy_production:
  image: alpine:latest
  stage: deploy-production
  before_script:
    - apk add --no-cache docker-compose curl
  script:
    - echo "🎯 Deploying to production environment..."
    - echo "Updating docker-compose with new image tags..."
    - sed -i "s/:latest/:$DOCKER_IMAGE_TAG/g" docker-compose.prod.yml
    - docker-compose -f docker-compose.prod.yml up -d
    - echo "⏳ Waiting for services to be healthy..."
    - sleep 60
    - echo "🔍 Health checking production services..."
    - curl -f http://api-gateway:8080/actuator/health || exit 1
    - echo "✅ Production deployment successful!"
  environment:
    name: production
    url: https://api.nngc.example.com
  when: manual  # Require manual approval for production
  only:
    - main
  dependencies:
    - package_service_registry
    - package_api_gateway
    - package_customer_service
    - package_token_service
    - package_stripe_service
    - package_email_service
    - package_google_service

###########################################
# CLEANUP
###########################################

cleanup_registry:
  <<: *docker_template
  stage: deploy-production
  script:
    - echo "🧹 Cleaning up old Docker images..."
    - docker system prune -f
  when: always
  allow_failure: true