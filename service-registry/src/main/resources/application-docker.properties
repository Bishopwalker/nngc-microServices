spring.application.name=service-registry
eureka.instance.hostname=service-registry
eureka.instance.prefer-ip-address=true
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka
server.port=8761

# Eureka Server Configuration for proper cleanup
eureka.server.enable-self-preservation=false
eureka.server.eviction-interval-timer-in-ms=15000
eureka.server.renewal-percent-threshold=0.85
eureka.instance.lease-renewal-interval-in-seconds=10
eureka.instance.lease-expiration-duration-in-seconds=30

# Keycloak OAuth2 Configuration - using Docker networking
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/nngc-realm/protocol/openid-connect/certs
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/nngc-realm

# OAuth2 Client Configuration for service-to-service communication
spring.security.oauth2.client.registration.keycloak.client-id=service-registry
spring.security.oauth2.client.registration.keycloak.client-secret=your-service-registry-secret
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.keycloak.scope=openid,profile

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/nngc-realm

# Actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always