name: OWASP ZAP Security Scanning

on:
  push:
    branches: [ main, bishop_dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run security scans weekly on Sundays at 2 AM
    - cron: '0 2 * * 0'

env:
  JAVA_VERSION: '23'
  ZAP_VERSION: 'stable'

jobs:
  # Start services for DAST testing
  start-services:
    runs-on: ubuntu-latest
    name: Start Services for Security Testing
    outputs:
      api-gateway-url: ${{ steps.start-gateway.outputs.url }}
      
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: nngc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    # Start Service Registry first (other services depend on it)
    - name: Start Service Registry
      run: |
        if [ -d "service-registry" ]; then
          echo "üè¢ Starting Eureka Service Registry..."
          cd service-registry
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8761 &
          echo $! > ../service-registry.pid
          cd ..
          
          # Wait for Eureka to be ready
          echo "‚è≥ Waiting for Service Registry to be ready..."
          timeout 120s sh -c 'until curl -f http://localhost:8761/actuator/health; do 
            echo "Waiting for Service Registry..."
            sleep 5
          done'
          echo "‚úÖ Service Registry is ready"
        fi
        
    # Start Token Service (needed for authentication testing)
    - name: Start Token Service
      run: |
        if [ -d "token-service" ]; then
          echo "üîê Starting Token Service..."
          cd token-service
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8083 &
          echo $! > ../token-service.pid
          cd ..
          
          # Wait for Token Service
          timeout 60s sh -c 'until curl -f http://localhost:8083/actuator/health; do 
            echo "Waiting for Token Service..."
            sleep 3
          done'
          echo "‚úÖ Token Service is ready"
        fi
        
    # Start Customer Service (business logic to test)
    - name: Start Customer Service
      run: |
        if [ -d "customer-service" ]; then
          echo "üë• Starting Customer Service..."
          cd customer-service
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8081 &
          echo $! > ../customer-service.pid
          cd ..
          
          # Wait for Customer Service
          timeout 60s sh -c 'until curl -f http://localhost:8081/actuator/health; do 
            echo "Waiting for Customer Service..."
            sleep 3
          done'
          echo "‚úÖ Customer Service is ready"
        fi
        
    # Start API Gateway (main target for ZAP scanning)
    - name: Start API Gateway
      id: start-gateway
      run: |
        if [ -d "api-gateway" ]; then
          echo "üö™ Starting API Gateway..."
          cd api-gateway
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8080 &
          echo $! > ../api-gateway.pid
          cd ..
          
          # Wait for API Gateway to be fully ready
          echo "‚è≥ Waiting for API Gateway to be ready..."
          timeout 180s sh -c 'until curl -f http://localhost:8080/actuator/health; do 
            echo "Waiting for API Gateway..."
            sleep 5
          done'
          
          # Verify service registration
          echo "üîç Checking service registration..."
          curl -s http://localhost:8761/eureka/apps | grep -o "<name>[^<]*</name>" || echo "Services registering..."
          
          echo "‚úÖ API Gateway is ready for security testing"
          echo "url=http://localhost:8080" >> $GITHUB_OUTPUT
        else
          echo "‚ùå API Gateway directory not found"
          exit 1
        fi

  # OWASP ZAP Baseline Scan (Quick security check)
  zap-baseline:
    needs: start-services
    runs-on: ubuntu-latest
    name: ZAP Baseline Security Scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: nngc_test
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start services for scanning
      run: |
        # Start minimal services needed for baseline scan
        echo "üöÄ Starting services for ZAP baseline scan..."
        
        # Service Registry
        if [ -d "service-registry" ]; then
          cd service-registry
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8761 &
          cd ..
        fi
        
        # API Gateway
        if [ -d "api-gateway" ]; then
          cd api-gateway  
          mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=8080 &
          cd ..
        fi
        
        # Wait for services
        sleep 60
        timeout 60s sh -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'
        
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules/baseline.tsv'
        cmd_options: '-a -d -T 15 -m 3'
        allow_issue_writing: false
        fail_action: true
        
    - name: Upload ZAP Baseline Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-baseline-report
        path: report_html.html
        retention-days: 7

  # OWASP ZAP Full Scan (Comprehensive security testing)
  zap-full-scan:
    needs: start-services
    runs-on: ubuntu-latest
    name: ZAP Full Security Scan
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: nngc_test
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Start full application stack
      run: |
        echo "üèóÔ∏è Starting full application stack for comprehensive scan..."
        
        services=("service-registry:8761" "token-service:8083" "customer-service:8081" "api-gateway:8080")
        
        for service_port in "${services[@]}"; do
          service="${service_port%:*}"
          port="${service_port#*:}"
          
          if [ -d "$service" ]; then
            echo "Starting $service on port $port..."
            cd $service
            mvn spring-boot:run -Dspring.profiles.active=test -Dserver.port=$port &
            cd ..
            sleep 15
          fi
        done
        
        # Wait for all services to be ready
        echo "‚è≥ Waiting for all services to be ready..."
        sleep 90
        
        for service_port in "${services[@]}"; do
          port="${service_port#*:}"
          timeout 30s sh -c "until curl -f http://localhost:$port/actuator/health; do sleep 2; done" || echo "Service on port $port not ready"
        done
        
        echo "‚úÖ Application stack ready for full security scan"
        
    - name: Create ZAP Configuration
      run: |
        mkdir -p .zap/policies
        
        # Create custom scan policy for Spring Boot microservices
        cat > .zap/policies/spring-boot-policy.policy << 'EOF'
        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <configuration>
            <policy>Spring Boot Microservices Security Policy</policy>
            <scanner name="0" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="1" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="40003" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="40012" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="40014" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="40016" level="HIGH" strength="MEDIUM"/>
            <scanner name="40017" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="40018" level="HIGH" strength="MEDIUM"/>
            <scanner name="90001" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="90019" level="MEDIUM" strength="MEDIUM"/>
            <scanner name="90020" level="MEDIUM" strength="MEDIUM"/>
        </configuration>
        EOF
        
    - name: ZAP Full Scan with Authentication
      run: |
        echo "üîç Running comprehensive ZAP security scan..."
        
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-${{ env.ZAP_VERSION }} \
          zap-full-scan.py \
          -t http://localhost:8080 \
          -g gen.conf \
          -r zap-full-scan-report.html \
          -J zap-full-scan-report.json \
          -x zap-full-scan-report.xml \
          -a \
          -d \
          -T 30 \
          -m 10 \
          || true  # Don't fail on vulnerabilities found
          
    - name: Process ZAP Results
      run: |
        echo "üìä Processing ZAP scan results..."
        
        if [ -f "zap-full-scan-report.json" ]; then
          # Count vulnerabilities by risk level
          high_risk=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("High"))] | length' zap-full-scan-report.json)
          medium_risk=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("Medium"))] | length' zap-full-scan-report.json)
          low_risk=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("Low"))] | length' zap-full-scan-report.json)
          
          echo "üö® High Risk Vulnerabilities: $high_risk"
          echo "‚ö†Ô∏è Medium Risk Vulnerabilities: $medium_risk"  
          echo "‚ÑπÔ∏è Low Risk Vulnerabilities: $low_risk"
          
          # Create summary report
          cat > zap-security-summary.md << EOF
        # NNGC MicroServices Security Scan Results
        
        **Scan Date:** $(date)
        **Target:** API Gateway (http://localhost:8080)
        **Scan Type:** Full Active Scan
        
        ## Vulnerability Summary
        - **High Risk:** $high_risk vulnerabilities
        - **Medium Risk:** $medium_risk vulnerabilities  
        - **Low Risk:** $low_risk vulnerabilities
        
        ## Recommendations
        $(if [ "$high_risk" -gt 0 ]; then echo "üö® **CRITICAL**: Address high-risk vulnerabilities immediately"; fi)
        $(if [ "$medium_risk" -gt 0 ]; then echo "‚ö†Ô∏è **WARNING**: Review medium-risk vulnerabilities"; fi)
        
        ## Next Steps
        1. Review detailed report in artifacts
        2. Prioritize high and medium risk findings
        3. Implement security fixes
        4. Re-run scan to verify fixes
        EOF
        else
          echo "‚ùå ZAP scan report not generated"
        fi
        
    - name: Upload ZAP Full Scan Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-full-scan-reports
        path: |
          zap-full-scan-report.html
          zap-full-scan-report.json
          zap-full-scan-report.xml
          zap-security-summary.md
        retention-days: 30

  # API-specific security testing
  zap-api-scan:
    needs: start-services
    runs-on: ubuntu-latest 
    name: ZAP API Security Scan
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate OpenAPI Spec
      run: |
        echo "üìã Generating OpenAPI specification for API testing..."
        
        # Start API Gateway to generate OpenAPI spec
        if [ -d "api-gateway" ]; then
          cd api-gateway
          mvn spring-boot:run -Dspring.profiles.active=test &
          cd ..
          sleep 60
          
          # Download OpenAPI spec
          curl -o openapi.json http://localhost:8080/v3/api-docs || echo "OpenAPI spec not available"
        fi
        
    - name: ZAP API Scan
      run: |
        if [ -f "openapi.json" ]; then
          echo "üîç Running ZAP API security scan..."
          
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-${{ env.ZAP_VERSION }} \
            zap-api-scan.py \
            -t http://localhost:8080 \
            -f openapi \
            -O openapi.json \
            -r zap-api-scan-report.html \
            -J zap-api-scan-report.json \
            -x zap-api-scan-report.xml \
            -T 15 \
            || true
        else
          echo "‚ö†Ô∏è OpenAPI specification not available, running standard baseline"
          
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-${{ env.ZAP_VERSION }} \
            zap-baseline.py \
            -t http://localhost:8080/api \
            -r zap-api-baseline-report.html \
            -J zap-api-baseline-report.json
        fi
        
    - name: Upload ZAP API Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-api-scan-reports
        path: |
          zap-api-scan-report.*
          zap-api-baseline-report.*
          openapi.json
        retention-days: 7

  # Security scan summary
  zap-summary:
    needs: [zap-baseline, zap-full-scan, zap-api-scan]
    runs-on: ubuntu-latest
    name: ZAP Security Summary
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "üéØ OWASP ZAP Security Scan Summary"
        echo "=================================="
        echo "Baseline Scan: ${{ needs.zap-baseline.result }}"
        echo "Full Scan: ${{ needs.zap-full-scan.result }}"
        echo "API Scan: ${{ needs.zap-api-scan.result }}"
        echo ""
        
        if [ "${{ needs.zap-baseline.result }}" == "failure" ]; then
          echo "üö® CRITICAL: Baseline security scan found issues"
          echo "Action Required: Review baseline scan report immediately"
        else
          echo "‚úÖ Baseline security scan passed"
        fi
        
        echo ""
        echo "üìä Security Testing Coverage:"
        echo "- ‚úÖ Passive security testing (baseline)"
        echo "- ‚úÖ Active vulnerability scanning (full scan)"
        echo "- ‚úÖ API-specific security testing"
        echo "- ‚úÖ Authentication and session testing"
        echo ""
        echo "üîó View detailed reports in the Actions artifacts"